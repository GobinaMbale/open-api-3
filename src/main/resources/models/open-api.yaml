openapi: 3.0.3
info:
  title: API HelloWord
  description: The microservices handles helloWord
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '@project.version@'
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://helloWordstore3.swagger.io/api/v3
tags:
  - name: helloWord
    description: Everything about your HelloWords
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /helloWord:
    put:
      tags:
        - helloWord
      summary: Update an existing helloword
      description: Update an existing helloword by Id
      operationId: updateHelloWord
      requestBody:
        description: Update an existent helloword in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelloWord'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWord'
        '400':
          description: Invalid ID supplied
        '404':
          description: HelloWord not found
        '422':
          description: Validation exception

    post:
      tags:
        - helloWord
      summary: Add a new helloWord to the store
      description: Add a new helloWord to the store
      operationId: addHelloWord
      requestBody:
        description: Create a new helloWord in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelloWord'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWord'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    get:
      tags:
        - helloWord
      summary: Finds helloWords
      description: Find All HelloWord
      operationId: findHelloWords
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelloWord'
        '404':
          description: HelloWord not found

  /helloWord/{helloWordId}:
    get:
      tags:
        - helloWord
      summary: Find helloWord by ID
      description: Returns a single helloWord
      operationId: getHelloWordById
      parameters:
        - name: helloWordId
          in: path
          description: ID of helloWord to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWord'
        '400':
          description: Invalid ID supplied
        '404':
          description: HelloWord not found
    delete:
      tags:
        - helloWord
      summary: Deletes a helloWord
      description: delete a helloWord
      operationId: deleteHelloWord
      parameters:
        - name: helloWordId
          in: path
          description: HelloWord id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid helloWord value

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    HelloWord:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: helloWord status in the store
          enum:
            - available
            - pending
            - sold
