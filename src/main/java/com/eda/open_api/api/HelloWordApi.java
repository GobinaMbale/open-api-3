/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eda.open_api.api;

import com.eda.open_api.dto.HelloWordDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-02T22:23:10.737381200+01:00[Europe/Paris]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "helloWord", description = "Everything about your HelloWords")
public interface HelloWordApi {

    /**
     * POST /helloWord : Add a new helloWord to the store
     * Add a new helloWord to the store
     *
     * @param helloWordDTO Create a new helloWord in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "addHelloWord",
        summary = "Add a new helloWord to the store",
        description = "Add a new helloWord to the store",
        tags = { "helloWord" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HelloWordDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/helloWord",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<HelloWordDTO> addHelloWord(
        @Parameter(name = "HelloWordDTO", description = "Create a new helloWord in the store", required = true) @Valid @RequestBody HelloWordDTO helloWordDTO
    );


    /**
     * DELETE /helloWord/{helloWordId} : Deletes a helloWord
     * delete a helloWord
     *
     * @param helloWordId HelloWord id to delete (required)
     * @return Invalid helloWord value (status code 400)
     */
    @Operation(
        operationId = "deleteHelloWord",
        summary = "Deletes a helloWord",
        description = "delete a helloWord",
        tags = { "helloWord" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid helloWord value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/helloWord/{helloWordId}"
    )
    
    ResponseEntity<Void> deleteHelloWord(
        @Parameter(name = "helloWordId", description = "HelloWord id to delete", required = true, in = ParameterIn.PATH) @PathVariable("helloWordId") Long helloWordId
    );


    /**
     * GET /helloWord : Finds helloWords
     * Find All HelloWord
     *
     * @return successful operation (status code 200)
     *         or HelloWord not found (status code 404)
     */
    @Operation(
        operationId = "findHelloWords",
        summary = "Finds helloWords",
        description = "Find All HelloWord",
        tags = { "helloWord" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HelloWordDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "HelloWord not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/helloWord",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<HelloWordDTO>> findHelloWords(
        
    );


    /**
     * GET /helloWord/{helloWordId} : Find helloWord by ID
     * Returns a single helloWord
     *
     * @param helloWordId ID of helloWord to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or HelloWord not found (status code 404)
     */
    @Operation(
        operationId = "getHelloWordById",
        summary = "Find helloWord by ID",
        description = "Returns a single helloWord",
        tags = { "helloWord" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HelloWordDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "HelloWord not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/helloWord/{helloWordId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<HelloWordDTO> getHelloWordById(
        @Parameter(name = "helloWordId", description = "ID of helloWord to return", required = true, in = ParameterIn.PATH) @PathVariable("helloWordId") Long helloWordId
    );


    /**
     * PUT /helloWord : Update an existing helloword
     * Update an existing helloword by Id
     *
     * @param helloWordDTO Update an existent helloword in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or HelloWord not found (status code 404)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "updateHelloWord",
        summary = "Update an existing helloword",
        description = "Update an existing helloword by Id",
        tags = { "helloWord" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HelloWordDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "HelloWord not found"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/helloWord",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<HelloWordDTO> updateHelloWord(
        @Parameter(name = "HelloWordDTO", description = "Update an existent helloword in the store", required = true) @Valid @RequestBody HelloWordDTO helloWordDTO
    );

}
